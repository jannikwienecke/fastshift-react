import {
  createConfigFromPrismaSchema,
  PrismaQueryProvider,
  prismaViewLoader,
  prismaViewMutation,
} from '@apps-next/query-adapter';
import { ReactQueryDevtools } from '@tanstack/react-query-devtools';
import './global.css';

import { GeistSans } from 'geist/font/sans';

// import '@picocss/pico/css/pico.classless.min.css';
import React from 'react';

export const metadata = {
  title: 'Welcome to nextjs',
  description: 'Generated by create-nx-workspace',
};

import { Prisma } from '@prisma/client';
import { prisma, PrismaClientType } from '../db';

export const dynamic = 'force-dynamic';

export const globalConfig = createConfigFromPrismaSchema<PrismaClientType>(
  Prisma.dmmf.datamodel,
  {
    // option to provide displayField for each table
    smart: {
      guessDisplayFieldIfNotProvided: true,
    },
  }
);

declare module '@apps-next/core' {
  interface Register {
    config: typeof globalConfig;
  }
}

export default function RootLayout({
  children,
}: {
  children: React.ReactNode;
}) {
  return (
    <html lang="en">
      {/* <React.StrictMode> */}

      <body className={GeistSans.className}>
        <PrismaQueryProvider
          config={globalConfig.config}
          api={{
            viewLoader: async (dto) => {
              'use server';
              return prismaViewLoader(prisma, dto);
            },
            viewMutation: async (props) => {
              'use server';
              return prismaViewMutation(prisma, props);
            },
          }}
        >
          {children}

          <ReactQueryDevtools initialIsOpen={false} />
        </PrismaQueryProvider>
      </body>
      {/* </React.StrictMode> */}
    </html>
  );
}
